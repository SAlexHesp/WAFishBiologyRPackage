library(WAFishBiology)
library(WAFishBiology)
set.seed(123)
MaxLen = 240
MaxAge = 20
Gaussian_A = 0.1
Gaussian_u = 80
Gaussian_sd = 40
StandDev = 10
GrowthCrvChoice = 2 # 1 = double logistic, 2 = Gaussian function, 3 = von Bertalanffy growth curve, 4 = Gompertz growth curve
params = log(c(Gaussian_A, Gaussian_u, Gaussian_sd, StandDev))
nSamples = 200
CalculationStage = 1
res=SimulateTagRecaptureData(GrowthCrvChoice, nSamples, MaxLen, MaxAge, params)
Obs_delta_t=res$Obs_delta_t
Obs_Initlen=res$Obs_Initlen
Obs_Finlen=res$Obs_Finlen
nobs = nSamples
params = log(c(0.1, 80, 40, 10))
FittedRes = GetTaggingGrowthModelResults(params, Obs_delta_t, Obs_Initlen, Obs_Finlen, nobs)
FittedRes
PlotFittedTaggingGrowthModelResults(params, Obs_delta_t, Obs_Initlen, Obs_Finlen, nobs)
FittedRes$ParamEst
#' DataType = 2 # 1=lengths at age data for individual fish, 2=mean length at age and sd data from mixture analysis
#' ObsAge=Res$ObsAgeCl
#' ObsMeanLen=Res$ObsMeanLen
#' ObsMeanLensd=Res$ObsMeanLensd
#' plotages=seq(0, MaxAge,0.1)
#' params = c(log(160),log(0.8),0,0.25,0.8) #Linf, vbK, tzero, tc, C
#' PlotFittedGrowthCurve(DataType=2,  GrowthEqn=3, ObsAge, ObsLen=NA, ObsMeanLen, ObsMeanLensd,
#'                       params, plotages=seq(0, MaxAge,0.1), ymax=200, xmax=NA, yint=20, xint=NA, GraphTitle=NA,
#'                       xaxis_lab=NA, yaxis_lab=NA, PlotCLs=T)
#' @export
PlotFittedGrowthCurve <- function(DataType, GrowthEqn, ObsAge, ObsLen, ObsMeanLen,
ObsMeanLensd, params, plotages, ymax, xmax, yint, xint,
GraphTitle, xaxis_lab, yaxis_lab, PlotCLs) {
# get default axis limits and intervals
xlims=Get_xaxis_scale(ObsAge)
ylims=Get_yaxis_scale(ObsLen)
if (is.na(xmax)) {
xmax = xlims$xmax
}
if (is.na(xint)) {
xint = xlims$xint
}
if (is.na(ymax)) {
ymax = ylims$ymax
}
if (is.na(yint)) {
yint = ylims$yint
}
if (is.na(xaxis_lab)) {
xaxis_lab = "Age, yrs"
}
if (is.na(yaxis_lab)) {
yaxis_lab = "Length, mm"
}
# fit growth curve and get results, including variance-covariance matrix
if (GrowthEqn == 1) { # von Bertalanffy
Res=GetvonBertalanffyGrowthResults(params, DataType, ObsAge, ObsLen, ObsMeanLen, ObsMeanLensd)
}
if (GrowthEqn == 2) { # Schnute
Res=GetSchnuteGrowthResults(params, DataType, t1, t2, ObsAge, ObsLen, ObsMeanLen, ObsMeanLensd)
}
if (GrowthEqn == 3) { # seasonal growth
Res=GetSeasonalGrowthResults(params, DataType, ObsAge, ObsLen, ObsMeanLen, ObsMeanLensd)
}
if (DataType == 1) FishLen = ObsLen
if (DataType == 2) FishLen = ObsMeanLen
plot(ObsAge, FishLen, "p", xlim=c(0,xmax), ylim=c(0,ymax), cex=0.5, pch=16,
frame=F, xaxt = 'n', yaxt = 'n', xlab="", ylab="", main=GraphTitle)
axis(1, seq(0,xmax,xint),labels=NA, line=0.2)
axis(2, seq(0,ymax,yint),labels=NA, line=0.2)
axis(1, seq(0,xmax,xint), lwd=0, labels=seq(0,xmax,xint), line=-0.2)
axis(2, seq(0,ymax,yint), lwd=0, labels=seq(0,ymax,yint), line=-0.2, las=1)
mtext(xaxis_lab,las=1,side=1,line=3,cex=1.0)
mtext(yaxis_lab,las=3,side=2,line=3,cex=1.0)
params=Res$params
if (GrowthEqn == 1) { # von Bertalanffy
res = CalcLengthAtAge_vonBertalanffyGrowthCurve2(params)
}
if (GrowthEqn == 2) { # Schnute
res = CalcLengthAtAge_SchnuteGrowthCurve2(params, t1, t2)
}
if (GrowthEqn == 3) { # Seasonal growth
res = CalcLengthAtAge_SomersSeasonalGrowthCurve2(params)
}
lines(res$plotages, res$plotlengths, lwd=2)
if (PlotCLs == TRUE) {
# get get parameter estimates and variance-covariance matrix
vcov.params = Res$vcov.params
# get confidence limits for estimated lengths
Res=GetConfidenceLimitsForGrowthCurve(GrowthEqn, params, vcov.params, plotages)
# plot confidence limits
lw = 0
hi = max(res$plotages)
x = c(res$plotages,rev(res$plotages)) # using shading for 95% CLs
y = c(Res$sim.growth.low, rev(Res$sim.growth.up))
polygon(x,y,col="light grey",border=NA)
lines(res$plotages, Res$sim.growth.est, "l", lty="solid")
lines(res$plotages, Res$sim.growth.low, "l", lty="dotted")
lines(res$plotages, Res$sim.growth.up, "l", lty="dotted")
points(ObsAge, FishLen, cex=0.5, pch=16)
}
if (DataType == 2) {
ObsLenlw = ObsMeanLen - (1.96 * ObsMeanLensd)
ObsLenup = ObsMeanLen + (1.96 * ObsMeanLensd)
arrows(ObsAge, ObsLenlw, ObsAge, ObsLenup,
code=3, angle=90,length=0.02, col='black')
}
}
@param#' Simulates seasonal fish length at age data for individual fish, and mean length at age data
library(WAFishBiology)
install.packages("C:/~/WAFishBiology_0.1.0.tar.gz", source = TRUE, repos=NULL)
# Simulate fish length at age data, and mean length at age data from von
# Bertalanffy growth curve
# install.packages("C:/~/WAFishBiology_0.1.0.tar.gz", source = TRUE, repos=NULL)
library(WAFishBiology)
# library(L3Assess)
# Simulate length at age data for individual fish and mean
# length at age data from growth curve
set.seed(123)
nSexes = 1
nSamples = 500
MinAge = 0
MaxAge = 20
ObsAge = runif(nSamples, MinAge, MaxAge)
Ref_ages = c(1,15)
Growth_params = c(40,400,0.02,3)
Growth_cv = 0.1
Res=SimulateLengthAtAgeData_Schnute(nSamples, nSexes, MinAge, MaxAge,
Ref_ages, Growth_params, Growth_cv)
plot(Res$ObsAge, Res$ObsLen)
# Fit Schnute growth curve to length at age data
ObsAge=Res$ObsAge
ObsLen=Res$ObsLen
DataType=1  # 1=lengths at age data for individual fish, 2=mean length at age and sd data from mixture analysis
params = c(log(60),log(420),0.05,2)
t1=1
t2=15
ObsMeanLen=NA
ObsMeanLensd=NA
GetSchnuteGrowthResults(params, nSexes, DataType, t1, t2, ObsAge, ObsLen, ObsMeanLen=NA, ObsMeanLensd=NA)
# Fit Schnute growth curve to mean length at age data
DataType=2  # 1=lengths at age data for individual fish, 2=mean length at age and sd data from mixture analysis
params = c(log(60),log(420),0.05,2)
t1=1
t2=15
ObsAge=Res$ObsAgeCl
ObsMeanLen=Res$ObsMeanLen
ObsMeanLensd=Res$ObsMeanLensd
GetSchnuteGrowthResults(params, nSexes, DataType, t1, t2, ObsAge, ObsLen=NA, ObsMeanLen, ObsMeanLensd)
set.seed(123)
nSexes = 2
nSamples = c(500,500)
MinAge = 0.2
MaxAge = 20
ObsAge = runif(nSamples, MinAge, MaxAge)
Ref_ages = c(0.2,10)
Growth_params = c(50,60,400,450,0.05,0.05,2,2)
Growth_cv = c(0.1,0.1)
Res=SimulateLengthAtAgeData_Schnute(nSamples, nSexes, MinAge, MaxAge,
Ref_ages, Growth_params, Growth_cv)
FemObsAge=as.vector(unlist(Res$ObsAge[1,]))
FemObsLen=as.vector(unlist(Res$ObsLen[1,]))
MalObsAge=as.vector(unlist(Res$ObsAge[2,]))
MalObsLen=as.vector(unlist(Res$ObsLen[2,]))
plot(FemObsAge, FemObsLen)
points(MalObsAge, MalObsLen, col="blue")
# Fit Schnute growth curve to length at age data
nSexes=2
ObsAge=as.matrix(Res$ObsAge)
ObsLen=as.matrix(Res$ObsLen)
DataType=1  # 1=lengths at age data for individual fish, 2=mean length at age and sd data from mixture analysis
params = c(log(c(50,60)),log(c(400,450)),0.05,0.02,2,2.5)
ObsMeanLen=NA
ObsMeanLensd=NA
GetSchnuteGrowthResults(params, nSexes, DataType, t1, t2, ObsAge, ObsLen, ObsMeanLen=NA, ObsMeanLensd=NA)
# Simulate fish length at age data, and mean length at age data from von
# Bertalanffy growth curve
# install.packages("C:/~/WAFishBiology_0.1.0.tar.gz", source = TRUE, repos=NULL)
library(WAFishBiology)
# library(L3Assess)
# Simulate length at age data for individual fish and mean
# length at age data from growth curve
set.seed(123)
nSexes = 1
nSamples = 500
MinAge = 0
MaxAge = 20
ObsAge = runif(nSamples, MinAge, MaxAge)
Ref_ages = c(1,15)
Growth_params = c(100,400,0.02,3)
Growth_cv = 0.1
Res=SimulateLengthAtAgeData_Schnute(nSamples, nSexes, MinAge, MaxAge,
Ref_ages, Growth_params, Growth_cv)
plot(Res$ObsAge, Res$ObsLen)
# Simulate fish length at age data, and mean length at age data from von
# Bertalanffy growth curve
# install.packages("C:/~/WAFishBiology_0.1.0.tar.gz", source = TRUE, repos=NULL)
library(WAFishBiology)
# library(L3Assess)
# Simulate length at age data for individual fish and mean
# length at age data from growth curve
set.seed(123)
nSexes = 1
nSamples = 500
MinAge = 0
MaxAge = 20
ObsAge = runif(nSamples, MinAge, MaxAge)
Ref_ages = c(0.5,15)
Growth_params = c(100,400,0.02,3)
Growth_cv = 0.1
Res=SimulateLengthAtAgeData_Schnute(nSamples, nSexes, MinAge, MaxAge,
Ref_ages, Growth_params, Growth_cv)
plot(Res$ObsAge, Res$ObsLen)
Fit Schnute growth curve to length at age data
ObsAge=Res$ObsAge
ObsLen=Res$ObsLen
DataType=1  # 1=lengths at age data for individual fish, 2=mean length at age and sd data from mixture analysis
params = c(log(100),log(420),0.05,2)
t1=0.5
t2=15
ObsMeanLen=NA
ObsMeanLensd=NA
GetSchnuteGrowthResults(params, nSexes, DataType, t1, t2, ObsAge, ObsLen, ObsMeanLen=NA, ObsMeanLensd=NA)
# Fit Schnute growth curve to mean length at age data
DataType=2  # 1=lengths at age data for individual fish, 2=mean length at age and sd data from mixture analysis
params = c(log(110),log(420),0.05,2)
t1=0.5
t2=15
ObsAge=Res$ObsAgeCl
ObsMeanLen=Res$ObsMeanLen
ObsMeanLensd=Res$ObsMeanLensd
GetSchnuteGrowthResults(params, nSexes, DataType, t1, t2, ObsAge, ObsLen=NA, ObsMeanLen, ObsMeanLensd)
set.seed(123)
nSexes = 2
nSamples = c(500,500)
MinAge = 0.2
MaxAge = 20
ObsAge = runif(nSamples, MinAge, MaxAge)
Ref_ages = c(0.5,15)
Growth_params = c(50,60,400,450,0.05,0.05,2,2)
Growth_cv = c(0.1,0.1)
Res=SimulateLengthAtAgeData_Schnute(nSamples, nSexes, MinAge, MaxAge,
Ref_ages, Growth_params, Growth_cv)
FemObsAge=as.vector(unlist(Res$ObsAge[1,]))
FemObsLen=as.vector(unlist(Res$ObsLen[1,]))
MalObsAge=as.vector(unlist(Res$ObsAge[2,]))
MalObsLen=as.vector(unlist(Res$ObsLen[2,]))
plot(FemObsAge, FemObsLen)
points(MalObsAge, MalObsLen, col="blue")
Growth_params = c(100,120,400,450,0.05,0.05,2,2)
Growth_cv = c(0.1,0.1)
Res=SimulateLengthAtAgeData_Schnute(nSamples, nSexes, MinAge, MaxAge,
Ref_ages, Growth_params, Growth_cv)
FemObsAge=as.vector(unlist(Res$ObsAge[1,]))
FemObsLen=as.vector(unlist(Res$ObsLen[1,]))
MalObsAge=as.vector(unlist(Res$ObsAge[2,]))
MalObsLen=as.vector(unlist(Res$ObsLen[2,]))
plot(FemObsAge, FemObsLen)
points(MalObsAge, MalObsLen, col="blue")
# Fit Schnute growth curve to length at age data
nSexes=2
ObsAge=as.matrix(Res$ObsAge)
ObsLen=as.matrix(Res$ObsLen)
DataType=1  # 1=lengths at age data for individual fish, 2=mean length at age and sd data from mixture analysis
params = c(log(c(80,90)),log(c(400,450)),0.05,0.02,2,2.5)
ObsMeanLen=NA
ObsMeanLensd=NA
GetSchnuteGrowthResults(params, nSexes, DataType, t1, t2, ObsAge, ObsLen, ObsMeanLen=NA, ObsMeanLensd=NA)
params = c(log(c(130,125)),log(c(400,450)),0.05,0.02,2,2.5)
ObsMeanLen=NA
ObsMeanLensd=NA
GetSchnuteGrowthResults(params, nSexes, DataType, t1, t2, ObsAge, ObsLen, ObsMeanLen=NA, ObsMeanLensd=NA)
# Fit Schnute growth curve to length at age data
nSexes=2
ObsAge=as.matrix(Res$ObsAge)
ObsLen=as.matrix(Res$ObsLen)
DataType=1  # 1=lengths at age data for individual fish, 2=mean length at age and sd data from mixture analysis
params = c(log(c(130,125)),log(c(400,450)),0.05,0.05,2,2)
ObsMeanLen=NA
ObsMeanLensd=NA
GetSchnuteGrowthResults(params, nSexes, DataType, t1, t2, ObsAge, ObsLen, ObsMeanLen=NA, ObsMeanLensd=NA)
# Fit Schnute growth curve to mean length at age data
DataType=2  # 1=lengths at age data for individual fish, 2=mean length at age and sd data from mixture analysis
params = c(log(c(130,125)),log(c(400,450)),0.05,0.05,2,2)
ObsAge=Res$ObsAgeCl
ObsMeanLen=Res$ObsMeanLen
ObsMeanLensd=Res$ObsMeanLensd
GetSchnuteGrowthResults(params, nSexes, DataType, t1, t2, ObsAge, ObsLen=NA, ObsMeanLen, ObsMeanLensd)
# Fit Schnute growth curve to mean length at age data
DataType=2  # 1=lengths at age data for individual fish, 2=mean length at age and sd data from mixture analysis
params = c(log(c(130,125)),log(c(400,450)),0.05,0.05,2,2)
ObsAge=Res$ObsAgeCl
ObsMeanLen=Res$ObsMeanLen
ObsMeanLensd=Res$ObsMeanLensd
ObsMeanLensd
Res
# Fit Schnute growth curve to mean length at age data
DataType=2  # 1=lengths at age data for individual fish, 2=mean length at age and sd data from mixture analysis
params = c(log(c(130,125)),log(c(400,450)),0.05,0.05,2,2)
ObsAge=Res$ObsAgeCl
FemObsMeanLen = Res$FemObsMeanLen
MalObsMeanLen = Res$MalObsMeanLen
ObsMeanLen = as.matrix(t(data.frame(FemObsMeanLen=FemObsMeanLen,MalObsMeanLen=MalObsMeanLen)))
FemObsMeanLensd = Res$FemObsMeanLensd
MalObsMeanLensd = Res$MalObsMeanLensd
ObsMeanLensd = as.matrix(t(data.frame(FemObsMeanLensd=FemObsMeanLensd,MalObsMeanLensd=MalObsMeanLensd)))
GetSchnuteGrowthResults(params, nSexes, DataType, t1, t2, ObsAge, ObsLen=NA, ObsMeanLen, ObsMeanLensd)
params = c(log(c(100,100)),log(c(400,450)),0.05,0.05,2,2)
ObsAge=Res$ObsAgeCl
FemObsMeanLen = Res$FemObsMeanLen
MalObsMeanLen = Res$MalObsMeanLen
ObsMeanLen = as.matrix(t(data.frame(FemObsMeanLen=FemObsMeanLen,MalObsMeanLen=MalObsMeanLen)))
FemObsMeanLensd = Res$FemObsMeanLensd
MalObsMeanLensd = Res$MalObsMeanLensd
ObsMeanLensd = as.matrix(t(data.frame(FemObsMeanLensd=FemObsMeanLensd,MalObsMeanLensd=MalObsMeanLensd)))
GetSchnuteGrowthResults(params, nSexes, DataType, t1, t2, ObsAge, ObsLen=NA, ObsMeanLen, ObsMeanLensd)
install.packages("C:/~/WAFishBiology_0.1.0.tar.gz", source = TRUE, repos=NULL)
# install.packages("C:/~/WAFishBiology_0.1.0.tar.gz", source = TRUE, repos=NULL)
library(WAFishBiology)
#Generate some synthetic length-at-maturity data and fit
#length-based maturity curve
MaxAge = 20
nSamples = 1000
Linf = 300
vbK = 0.3
tzero = 0
CVSizeAtAge = 0.1
MinLen = 0
MaxLen = 400
LenInc = 20
L50 = 220
L95 = 270
Pmax = 0.9
Maturity_params = c(L50, L95, Pmax)
res=SimulateLengthAtMaturityData(nSamples, MaxAge, Linf, vbK, tzero, MinLen, MaxLen, LenInc, Maturity_params)
midpt = res$midpt
PropMat = res$PropMat
LenClSampSize=res$LenClSampSize
xmax=MaxLen
xint=50
GraphTitle=NA
xaxis_lab=NA
yaxis_lab=NA
SampSizelab_cex=NA
PlotLengthAtMaturityData(midpt, PropMat, LenClSampSize, xmax, xint,
GraphTitle, SampSizelab_cex, xaxis_lab, yaxis_lab)
ObsAgeCl=NA
ObsLen=res$ObsLen
ObsMatCat=res$ObsMatCat
InitL50 = 200
InitL95 = 250
InitPmax = 0.9
InitPmax_logit = log(InitPmax/(1-InitPmax)) # logit transform
# params = c(InitL50, InitL95) # without Pmax parameter
params = c(InitPmax_logit, InitL50, InitL95) # with Pmax parameter
LogisticModType = 1 # 1=length, 2=age
GetLogisticMaturityCurveResults(params, LogisticModType, ObsLen, ObsAgeCl, ObsMatCat) # get length-at-maturity results
plotlengths=res$plotlengths
PlotFittedLengthAtMaturityCurve(params, ObsLen, ObsMatCat, LenClSampSize, midpt, PropMat, plotlengths,
xmax=400, xint=50, GraphTitle=NA, xaxis_lab="Total length, mm",
yaxis_lab="Prop. mature", SampSizelab_cex=NA, ShowSampSizes=TRUE, PlotCLs=FALSE)
PlotFittedLengthAtMaturityCurve(params, ObsLen, ObsMatCat, LenClSampSize, midpt, PropMat, plotlengths,
xmax=400, xint=50, GraphTitle=NA, xaxis_lab="Total length, mm",
yaxis_lab="Prop. mature", SampSizelab_cex=NA, ShowSampSizes=TRUE, PlotCLs=TRUE)
res=GetLogisticMaturityCurveResults(params, LogisticModType, ObsLen, ObsAgeCl, ObsMatCat) # get length-at-maturity results
res$ParamEst
PlotFittedLengthAtMaturityCurve(params, ObsLen, ObsMatCat, LenClSampSize, midpt, PropMat, plotlengths,
xmax=400, xint=50, GraphTitle=NA, xaxis_lab="Total length, mm",
yaxis_lab="Prop. mature", SampSizelab_cex=NA, ShowSampSizes=TRUE, PlotCLs=FALSE)
PlotFittedLengthAtMaturityCurve(params, ObsLen, ObsMatCat, LenClSampSize, midpt, PropMat, plotlengths,
xmax=400, xint=50, GraphTitle=NA, xaxis_lab="Total length, mm",
yaxis_lab="Prop. mature", SampSizelab_cex=NA, ShowSampSizes=TRUE, PlotCLs=TRUE)
params
Pmax = ilogit(params[1])
Pmax
params
vcov.params
# generate some synthetic maturity data
set.seed(123)
MinAge = 0
MaxAge = 20
nSamples = 1000
A50 = 4
A95 = 6
Pmax = 0.9
MaturityParams = c(A50, A95, Pmax)
res=SimulateAgeAtMaturityData(nSamples, MinAge, MaxAge, MaturityParams)
AgeCl = res$AgeClasses
PropMat = res$PropMat
AgeClSampSize=res$AgeClSampSize
xmax=MaxAge
xint=2
GraphTitle=NA
xaxis_lab=NA
yaxis_lab=NA
PlotAgeAtMaturityData(AgeCl, PropMat, AgeClSampSize, xmax, xint,
GraphTitle, SampSizelab_cex, xaxis_lab, yaxis_lab)
ObsLen=NA
ObsAgeCl=res$ObsAgeCl
ObsMatCat=res$ObsMatCat
InitA50 = 4.5
InitA95 = 7
InitPmax = 0.9
InitPmax_logit = log(InitPmax/(1-InitPmax)) # logit transform
# params = c(InitA50, InitA95) # without Pmax parameter
params = c(InitPmax_logit, InitA50, InitA95) # with Pmax parameter
LogisticModType = 2 # 1=length, 2=age
GetLogisticMaturityCurveResults(params, LogisticModType, ObsLen, ObsAgeCl, ObsMatCat) # get age-at-maturity results
res$ParamEst
plotlengths=res$plotlengths
PlotFittedLengthAtMaturityCurve(params, ObsLen, ObsMatCat, LenClSampSize, midpt, PropMat, plotlengths,
xmax=400, xint=50, GraphTitle=NA, xaxis_lab="Total length, mm",
yaxis_lab="Prop. mature", SampSizelab_cex=NA, ShowSampSizes=TRUE, PlotCLs=TRUE)
PlotFittedAgeAtMaturityCurve(params, ObsLen, ObsMatCat, LenClSampSize, midpt, PropMat, plotlengths,
xmax=400, xint=50, GraphTitle=NA, xaxis_lab="Total length, mm",
yaxis_lab="Prop. mature", SampSizelab_cex=NA, ShowSampSizes=TRUE, PlotCLs=TRUE)
plotages=res$plotages
PlotFittedAgeAtMaturityCurve(params, ObsAgeCl, ObsMatCat, AgeCl, PropMat, AgeClSampSize, plotages,
xmax=20, xint=2, GraphTitle=NA, xaxis_lab="Total length, mm",
yaxis_lab="Prop. mature", SampSizelab_cex = NA, ShowSampSizes=FALSE, PlotCLs=FALSE)
res$ParamEst
plotages=res$plotages
PlotFittedAgeAtMaturityCurve(params, ObsAgeCl, ObsMatCat, AgeCl, PropMat, AgeClSampSize, plotages,
xmax=20, xint=2, GraphTitle=NA, xaxis_lab="Total length, mm",
yaxis_lab="Prop. mature", SampSizelab_cex = NA, ShowSampSizes=FALSE, PlotCLs=FALSE)
plotages
PlotFittedAgeAtMaturityCurve(params, ObsAgeCl, ObsMatCat, AgeCl, PropMat, AgeClSampSize, plotages,
xmax=20, xint=2, GraphTitle=NA, xaxis_lab="Total length, mm",
yaxis_lab="Prop. mature", SampSizelab_cex = NA, ShowSampSizes=FALSE, PlotCLs=T)
PlotFittedAgeAtMaturityCurve(params, ObsAgeCl, ObsMatCat, AgeCl, PropMat, AgeClSampSize, plotages,
xmax=20, xint=2, GraphTitle=NA, xaxis_lab="Total length, mm",
yaxis_lab="Prop. mature", SampSizelab_cex = NA, ShowSampSizes=FALSE, PlotCLs=FALSE)
params
Pmax = ilogit(params[1])
A50=params[2]
A95=params[3]
Pmax
A50
A95
results = Pmax / (1.0 + exp(- log(19) * (plotages - A50) / (A95 - A50)))
results
res = GetLogisticMaturityCurveResults(params, LogisticModType, ObsLen, ObsAgeCl, ObsMatCat)
if (length(params)==2) { # not estimating Pmax
L50 = res$ParamEst[1,1]
L95 = res$ParamEst[2,1]
params = c(L50,L95)
Pmax = 1.0
}
if (length(params)==3) { # estimating Pmax
Pmax = res$ParamEst[1,1]
L50 = res$ParamEst[2,1]
L95 = res$ParamEst[3,1]
params = c(Pmax,L50,L95)
}
params
# get data for confidence limits
params = res$params
params
# get data for confidence limits
params = res$params
vcov.params = res$vcov.params
res = GetConfidenceLimitsForMaturityCurve(params, vcov.params, LogisticModType, plotlengths, plotages=NA)
# Alex Hesp
# Length-based per recruit analysis for (variable timestep)
# install.packages("C:/~/L3Assess_0.1.0.tar.gz", source = TRUE, repos=NULL)
# install.packages("C:/~/WAFishBiology_0.1.0.tar.gz", source = TRUE, repos=NULL)
rm(list=ls())
library(L3Assess)
library(WAFishBiology)
# library("Rcpp")
# sourceCpp("L3Analyses_test.cpp")
# Simulate data with 1 mode, specifying normal distribution
set.seed(123)
MinSize = 0
MaxSize = 60
SizeInt = 1
SampSize = 1000
Cohorts=1
Mean1 = 20
sd1 = 5
ObsSize = round(rnorm(SampSize, Mean1, sd1),0)
HistData=hist(ObsSize, breaks=seq(0,MaxSize,SizeInt), right=FALSE, plot=FALSE)
ObsFreq = HistData$counts
# Specify starting parameter values for Mean1 and sd1, and return associated negative log-likelihood
DistnType = 1 # 1=normal, 2=gamma
params = log(c(30, 5)) # normal
PlotMixtureDistnResults(params, DistnType, Cohorts, ObsFreq, MinSize, MaxSize, SizeInt, ymax=100, xmax=50, yint=20, xint=10,
GraphTitle=NA, xaxis_lab=NA, yaxis_lab=NA, set.plot.par=TRUE, PlotHist=TRUE, PlotCLs=FALSE)
# Simulate data with 1 mode, specifying gamma distribution
set.seed(123)
MinSize = 0
MaxSize = 60
SizeInt = 1
SampSize = 1000
Cohorts=1
Shape1 = 20
Rate1 = 1
ObsSize = round(rgamma(SampSize, Shape1, Rate1),0)
HistData=hist(ObsSize, breaks=seq(0,MaxSize,SizeInt), right=FALSE, plot=FALSE)
ObsFreq = HistData$counts
DistnType = 2 # 1=normal, 2=gamma
params = log(c(20, 1)) # gamma
PlotMixtureDistnResults(params, DistnType, Cohorts, ObsFreq, MinSize, MaxSize, SizeInt, ymax=100, xmax=50, yint=20, xint=10,
GraphTitle=NA, xaxis_lab=NA, yaxis_lab=NA, set.plot.par=TRUE, PlotHist=TRUE, PlotCLs=FALSE)
PlotMixtureDistnResults(params, DistnType, Cohorts, ObsFreq, MinSize, MaxSize, SizeInt, ymax=100, xmax=50, yint=20, xint=10,
GraphTitle=NA, xaxis_lab=NA, yaxis_lab=NA, set.plot.par=TRUE, PlotHist=TRUE, PlotCLs=TRUE)
PlotMixtureDistnResults(params, DistnType, Cohorts, ObsFreq, MinSize, MaxSize, SizeInt, ymax=100, xmax=50, yint=20, xint=10,
GraphTitle=NA, xaxis_lab=NA, yaxis_lab=NA, set.plot.par=TRUE, PlotHist=FALSE, PlotCLs=TRUE)
library(WAFishBiology)
