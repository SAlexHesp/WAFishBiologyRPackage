

# library(devtools)
# devtools::install_github("SAlexHesp/L3AssessRPackage", build_vignettes=TRUE, force=TRUE)

# install.packages("C:/~/WAFishBiology_0.1.0.tar.gz", source = TRUE, repos=NULL)

# simulate age and length data
library(WAFishBiology)
# library(MASS)

# Simulate spawning proportion data
# First, simulate length and age data
set.seed(123)
GrowthEqn=1 # von Bertalanffy
nSamples = 5000
nSexes = 1
MinAge = 1
MaxAge = 20
AgeStep = 1
Ref_ages = NA
Linf = 1000
vbK = 0.1
tzero = 0
Growth_params = c(Linf,vbK,tzero)
Growth_cv = 0.08
# Spawning duration model parameters
lnL50 = log(300)
lnslope= log(0.015)
logitPkSpawn = log(0.6/(1-0.6))
lnkappa = log(0.0002)
lnkappa2 = log(0.0002)
lnslope1 = log(30)
lnslope2 = log(30)
params = c(lnL50,lnslope,logitPkSpawn,lnkappa,lnkappa2,lnslope1,lnslope2)
Res=SimulateSpawningDurationData(params, GrowthEqn, nSamples, nSexes, MinAge, MaxAge,
                                 AgeStep, Ref_ages, Growth_params, Growth_cv)

DecDay = seq(0,1,0.01)
FishLen = 500
res=CalcDaily_SpDurMod(FishLen, DecDay, params)
plot(DecDay,res$P_t_s,"l")

# x_is_gt_bound <- function(x, bound, slope) {
#   # Returns 0 if x << bound and 1 if x >> bound.
#   # The parameter, slope, determines the range over
#   # which the return value changes. The function
#   # used is the logistic function, where the return
#   # value is 0.5 when x == bound and 0.95
#   # when x95 == bound + log(19)/slope
#   result = 1.0 / (1.0 + exp(slope * (bound - x)))
#   return (result)
# }
#
# x_is_lt_bound <- function(x, bound, slope) {
#   # Returns 0 if x >> bound and 1 if x << bound.
#   # The parameter, slope, determines the range over
#   # which the return value changes. The function
#   # used is the logistic function, where the return
#   # value is 0.5 when x == bound and 0.05
#   # when x05 == bound + log(19)/slope.
#   result = 1.0 - 1.0 / (1.0 + exp(slope * (bound - x)))
#   return (result)
# }
#
# posfun <- function (x, eps, pen) {
#   # Assume eps = log(19)/slope
#   slope = log(19.0) / eps
#   bound = eps
#   result = x *  x_is_gt_bound(x, bound, slope);
#   return (result)
# }
#
# penfun <- function(x, eps) {
#   # Assume eps = log(19)/slope
#   slope = log(19.0) / eps
#   bound = eps
#   result = (x-eps) * (x-eps) * x_is_lt_bound(x, bound, slope)
#   return (result)
# }

CalcDailySpawnProps_SpDurMod <- function(FishLen, DecDay, params) {

  param_pen = 0
  # asymmetric double logistic, variable height (scaling factor) & width

  temp_parm = exp(params[2])
  eps = 0.001
  param_pen = 0
  uppbound = 0.5 # equals slope of about 0.5
  param_pen = param_pen + penfun(uppbound - temp_parm, eps)
  temp_parm = uppbound - posfun(uppbound - temp_parm, eps, param_pen)
  # cat("temp_parm",temp_parm,"uppbound",uppbound,"param_pen",param_pen,'\n')

  L50 = exp(params[1])
  slope = exp(params[2])
  Peak_spawn =  1/(1+exp(-params[3])) # ilogit transform
  kappa = exp(params[4])
  kappa2 = exp(params[5])
  slope1 = exp(params[6])
  slope2 = exp(params[7])

  d50 = Peak_spawn - kappa * FishLen
  d50_2 = Peak_spawn + kappa2 * FishLen
  Height = 1 / (1 + exp(-slope*(FishLen-L50)))

  P_t_s = 1 / (1 + exp(-slope1*(DecDay-d50))) *
    1 / (1 + exp(slope2*(DecDay-d50_2))) * Height

  res = list(P_t_s=P_t_s,
             param_pen=param_pen)
  return(res)

}

SimulateSpawningDurationData <- function(params, GrowthEqn, nSamples, nSexes, MinAge, MaxAge, AgeStep, Ref_ages, Growth_params, Growth_cv) {


  Res = SimulateLengthAtAgeData(GrowthEqn, nSamples, nSexes, MinAge, MaxAge, AgeStep, Ref_ages, Growth_params, Growth_cv)

  # Get expected probability of spawning, given size of fish and time of year
  FishLen=round(Res$ObsLen,0)
  DecDay = Res$ObsAge - trunc(Res$ObsAge/1)*1
  MM = 1+((trunc(DecDay/(1/12))*(1/12))*12)

  res=CalcDailySpawnProps_SpDurMod(FishLen, DecDay, params)
  ExpSpawnProbs=res$P_t_s

  # assign mature /  non-mature, based on probability and random numbers
  ObsMatStatus = rep(NA,nSamples)
  for (i in 1:nSamples) {
    randnum = runif(1,0,1) # draw random number, between 0 and 1, from uniform distribution
    if (randnum <= ExpSpawnProbs[i]) {
      ObsMatStatus[i] = 1
    } else {
      ObsMatStatus[i] = 0
    }
  }

  Results = list(FishLen=FishLen,
                 DecDay=DecDay,
                 MM=MM,
                 ExpSpawnProbs=ExpSpawnProbs,
                 ObsMatStatus=ObsMatStatus)

}

CalcNLL_SpDurMod <- function(params) {

  Res = CalcDailySpawnProps_SpDurMod(FishLen, DecDay, params)
  Likelihood = rep(-999, length(DecDay))
  Likelihood[which(ObsMatStatus==1)] = Res$P_t_s[which(ObsMatStatus==1)]
  Likelihood[which(ObsMatStatus==0)] = 1 - Res$P_t_s[which(ObsMatStatus==0)]

  LL <- log(Likelihood + 1E-4)

  NLL = -sum(LL) + Res$param_pen
  results = NLL
  cat("NLL",NLL,"params",params,"Res$param_pen",Res$param_pen,'\n')

  return(results)

}
# CalcNLL_SpDurMod(params)


GetSpawningDurationModelResults <- function(params) {

  for (i in 1:3) {
    nlmb <- nlminb(params, CalcNLL_SpDurMod, gradient = NULL, hessian = TRUE,
                   control=list(trace=1, rel.tol=0.0000001))
    params = nlmb$par
  }

  params = nlmb$par
  NLL = nlmb$objective
  convergence = nlmb$convergence

  # get variance-covariance matrix, from fitted model
  hess.out = optimHess(params, CalcNLL_SpDurMod)
  vcov.Params = solve(hess.out)
  ses = sqrt(diag(vcov.Params))

  # get parameter estimates and asymptotic error estimates
  EstL50 = c(exp(nlmb$par[1]), exp(nlmb$par[1] + c(-1.96, 1.96) * ses[1]))
  Estslope = c(exp(nlmb$par[2]), exp(nlmb$par[2] + c(-1.96, 1.96) * ses[2]))
  temp=c(nlmb$par[3], nlmb$par[3] + c(-1.96, 1.96) * ses[3])
  EstPkSpawn = exp(temp) / (exp(temp)+1) # ilogit transform
  Estkappa = c(exp(nlmb$par[4]), exp(nlmb$par[4] + c(-1.96, 1.96) * ses[4]))
  Estkappa2 = c(exp(nlmb$par[5]), exp(nlmb$par[5] + c(-1.96, 1.96) * ses[5]))
  Estslope1 = c(exp(nlmb$par[6]), exp(nlmb$par[6] + c(-1.96, 1.96) * ses[6]))
  Estslope2 = c(exp(nlmb$par[7]), exp(nlmb$par[7] + c(-1.96, 1.96) * ses[7]))

  ParamEst = t(data.frame(EstL50=round(EstL50,2), Estslope=round(Estslope,3),
                          EstPkSpawn=round(EstPkSpawn,3), Estkappa=round(Estkappa,5),
                          Estkappa2=round(Estkappa2,5), Estslope1=round(Estslope1,3),
                          Estslope2=round(Estslope2,3)))

  # Use resampling approach to get estimates of uncertainty of derived outputs for model

  set.seed(123)
  nsims = 20
  sims = data.frame(mvrnorm(n = nsims, params, vcov.Params))
  names(sims) = c("ln_L50", "ln_slope","lgt_PkSpawn","ln_kappa","ln_kappa2",
                  "ln_slope1","ln_slope2")

  sims$L50 = exp(sims$ln_L50)
  sims$slope = exp(sims$ln_slope)
  sims$Peak_spawn = exp(sims$lgt_PkSpawn) / (exp(sims$lgt_PkSpawn)+1) # ilogit transform
  sims$kappa = exp(sims$ln_kappa)
  sims$kappa2 = exp(sims$ln_kappa2)
  sims$slope1 = exp(sims$ln_slope1)
  sims$slope2 = exp(sims$ln_slope2)

  # Recalculate 95% CLs for estimated parameters and back-transformed values of estimated parameters
  sims.mean = apply(sims[, 1:14], MARGIN=2, function(x) mean(x))
  sims.median = apply(sims[, 1:14], MARGIN=2, function(x) quantile(x, 0.5))
  sims.lowCL = apply(sims[, 1:14], MARGIN=2, function(x) quantile(x, 0.025))
  sims.uppCL = apply(sims[, 1:14], MARGIN=2, function(x) quantile(x, 0.975))
  ParamEst.sim = round(cbind(sims.mean, sims.median, sims.lowCL, sims.uppCL), 3)


  res = list(params=params,
             NLL=NLL,
             convergence=convergence,
             vcov.Params=vcov.Params,
             ParamEst=ParamEst,
             ParamEst.sim=ParamEst.sim)

  return(res)
}

CalcObsProps_SpDurMod <- function(subDat) {
  Probs = rep(0, length(seq(1,12,1))) # calculate monthly
  for (j in seq(1,12,1)) {
    xx = which(subDat$MM >= j-0.0001 & subDat$MM <= j+0.0001)
    Probs[j] = length(which(subDat$ObsMatStatus[xx] == 1)) / length(xx)
    # cat("j",j,"n",length(xx),"probs",Probs[j],'\n')
  }
  return(Probs)
}

# ********************
# check spawning model
# ********************
DecDay_plot=seq(0,1,0.01)
lnL50 = log(300)
slope = log(0.015)
logitPkSpawn = log(0.6/(1-0.6))
lnkappa = log(0.0002)
lnkappa2 = log(0.0002)
lnslope1 = log(30)
lnslope2 = log(30)
params = c(lnL50,lnL50,logitPkSpawn,lnkappa,lnkappa2,lnslope1,lnslope2)
FishLengths=seq(300,1000,200)
nFishLengths = length(FishLengths)
par(mfrow=c(1,1))
for (i in 1:nFishLengths) {
  FishLen=FishLengths[i]
  Res=CalcDailySpawnProps_SpDurMod(FishLen, DecDay_plot, params)
  if (i==1) {
    plot(DecDay_plot,Res$P_t_s,ylim=c(0,1),"l",col=i)
  } else {
    lines(DecDay_plot,Res$P_t_s,col=i)
  }
}


# *******************************
# simulate spawning duration data
# *******************************

# Simulate length and age data
set.seed(123)
GrowthEqn=1 # von Bertalanffy
nSamples = 5000
nSexes = 1
MinAge = 1
MaxAge = 20
AgeStep = 1
Ref_ages = NA
Linf = 1000
vbK = 0.1
tzero = 0
Growth_params = c(Linf,vbK,tzero)
Growth_cv = 0.08
# spawning duration model parameters
lnL50 = log(300)
lnslope= log(0.015)
logitPkSpawn = log(0.6/(1-0.6))
lnkappa = log(0.0002)
lnkappa2 = log(0.0002)
lnslope1 = log(30)
lnslope2 = log(30)
params = c(lnL50,lnslope,logitPkSpawn,lnkappa,lnkappa2,lnslope1,lnslope2)
Res=SimulateSpawningDurationData(params, GrowthEqn, nSamples, nSexes, MinAge, MaxAge, AgeStep, Ref_ages, Growth_params, Growth_cv)
ObsMatStatus=Res$ObsMatStatus
FishLen=Res$FishLen
MM=Res$MM
DecDay=Res$DecDay
ObsSpawnDat = data.frame(MM=MM,FishLen=FishLen,ObsMatStatus=ObsMatStatus)
# params = c(lnL50,lnslope,logitPkSpawn,lnkappa,lnkappa2,lnslope1,lnslope2)
params = NA
CalcNLL_SpDurMod(params)
params = NA
lbnds = seq(300,900,100)
ubnds = lbnds + 100
PlotSpawningDurationData(RandDat, lbnds, ubnds, params)

# Plot observed proportions of fish, of different length categories,
# that are mature/spawning in each month, based on the simulated data
PlotSpawningDurationData <- function(ObsSpawnDat, lbnds, ubnds, params) {
  nLenCats = length(lbnds)
  floor(nLenCats/2)+1
  par(mfrow=c(floor(nLenCats/2)+1,2))
  for (i in 1:nLenCats) {
    subDat = ObsSpawnDat[ObsSpawnDat$FishLen >= lbnds[i] & ObsSpawnDat$FishLen < ubnds[i],]
    Probs = CalcObsProps_SpDurMod(subDat)
    plot(seq(0.5,11.5,1), Probs, ylim=c(0,1),
         xlab="Dec. Day", ylab="Prob spawning", main=paste0(lbnds[i],"-",ubnds[i]), cex.main=1)
    if(!is.na(params[i])) {
      FishLen=(lbnds[i] + ubnds[i])/2
      Res=CalcDailySpawnProps_SpDurMod(FishLen, DecDay_plot, params)
      lines(DecDay_plot*12,Res$P_t_s,col=i)
    }
  } # i
}



# ***************************
# Fit spawning duration model
# ***************************
lnL50 = log(400)
lnslope = log(0.02)
logitPkSpawn = log(0.65/(1-0.65))
lnkappa = log(0.0005)
lnkappa2 = log(0.0002)
lnslope1 = log(20)
lnslope2 = log(25)
params = NA
# params = c(lnL50,lnslope,logitPkSpawn,lnkappa,lnkappa2,lnslope1,lnslope2)
CalcNLL_SpDurMod(params)
params = NA
lbnds = seq(300,900,100)
ubnds = lbnds + 100
PlotSpawningDurationData(RandDat, lbnds, ubnds, params)
# res=GetSpawningDurationModelResults(params)


# params=NA # just plot data
params=res$params
PlotSpawningDurationData(RandDat, lbnds, ubnds, params)


