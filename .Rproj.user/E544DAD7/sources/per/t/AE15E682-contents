
# install.packages("C:/~/WAFishBiology_0.1.0.tar.gz", source = TRUE, repos=NULL)

# library(devtools)
# devtools::install_github("SAlexHesp/L3AssessRPackage", build_vignettes=TRUE, force=TRUE)

library(WAFishBiology)


# simulate tag-recapture data, based on von Bertalanffy growth curve
set.seed(123)
nstep = 50 # number of steps for numerical integration
MaxLen = 240
GrowthCrvChoice = 3 # 1 = double logistic, 2 = Gaussian function, 3 = von Bertalanffy growth curve, 4 = Gompertz growth curve
vbLinf = 250
vbK = 0.3
StandDev = 10
params = log(c(vbLinf, vbK, StandDev))
nobs = 200
CalculationStage = 1
res=SimulateTagRecaptureData(GrowthCrvChoice, nstep, nobs, MaxLen, params)
Obs_delta_t=res$Obs_delta_t
Obs_Initlen=res$Obs_Initlen
Obs_Finlen=res$Obs_Finlen
plot(Obs_Initlen,Obs_Finlen-Obs_Initlen)


# fit model
vbLinf = 280
vbK = 0.2
StandDev = 10
params = log(c(vbLinf, vbK, StandDev))
MaxAge = 20
FittedRes=GetTaggingGrowthModelResults(params, nstep, Obs_delta_t, Obs_Initlen, Obs_Finlen, MaxAge, nobs)
FittedRes$convergence
FittedRes$ParamEst

PlotFittedTaggingGrowthModelResults(params, nstep, Obs_delta_t, Obs_Initlen, Obs_Finlen, MaxAge, nobs, FittedRes)



# ****************
# fit to real data
# ****************


dat = read.csv("Sandbar.csv",header=T)
head(dat)

Obs_delta_t=dat$Obs_delta_t
Obs_Initlen=dat$Obs_Initlen
Obs_Finlen=dat$Obs_Finlen
plot(Obs_Initlen,Obs_Finlen)
nobs = length(Obs_Initlen)

# fit model
vbLinf = 200
vbK = 0.2
StandDev = 10
params = log(c(vbLinf, vbK, StandDev))
MaxAge = 20
FittedRes=GetTaggingGrowthModelResults(params, nstep, Obs_delta_t, Obs_Initlen, Obs_Finlen, MaxAge, nobs)
FittedRes$convergence
FittedRes$ParamEst

PlotFittedTaggingGrowthModelResults(params, nstep, Obs_delta_t, Obs_Initlen, Obs_Finlen, MaxAge, nobs, FittedRes)


y_data=Obs_Finlen
Get_yaxis_scale <- function(y_data) {
  
  xx = floor(log10(max(y_data)))
  ymin = floor(min(0.8 * y_data))
  temp_ymax = ceiling(max(1.2 * y_data))
  temp_ymax2 = round(temp_ymax, -xx)
  xxx = (temp_ymax2-ymin)/4
  yint = round(xxx, -xx)
  ymax = ymin + (4 * yint)
  
  results = list(ymin = ymin,
                 ymax = ymax,
                 yint = yint)
  
  return(results)
}


Get_xaxis_scale <- function(x_data) {
  
  xx = floor(log10(max(x_data)))
  temp_xmin = floor(min(0.8 * x_data))
  xmin = round(temp_xmin, -xx)
  
  temp_xmax = ceiling(1.2*max(x_data))
  temp_xmax2 = round(temp_xmax, -xx)
  xint = (temp_xmax2-xmin)/4
  xmax = xmin + (4 * xint)
  results = list(xmin = xmin,
                 xmax = xmax,
                 xint = xint)
  
  
  return(results)
}

library("Rcpp")
sourceCpp("FishBiologyAnalyses.cpp")

PlotFittedTaggingGrowthModelResults <- function(params, nstep, Obs_delta_t, Obs_Initlen, Obs_Finlen, MaxAge, nobs, FittedRes) {
  
  .pardefault <- par(no.readonly = TRUE) # store default par settings
  
  # if model already fitted, can input results rather than refit
  if (is.list(FittedRes)) {
    res =  FittedRes
  } else {
    res=GetTaggingGrowthModelResults(params, nstep, Obs_delta_t, Obs_Initlen, Obs_Finlen, MaxAge, nobs)
  }
  
  params=log(as.vector(res$ParamEst[,1]))
  
  # deltaL vs initial length
  CalculationStage = 1
  LenPrevIntAge = NA
  EstLenAtRelAge = rep(0, nobs)
  for (j in 1:nobs) {
    EstLenAtRelAge[j] = LenAtAge_Rcpp(j, params, GrowthCrvChoice, nstep, CalculationStage, LenPrevIntAge, StartAge=0,
                                      Obs_delta_t, Obs_Initlen)
  }
  
  par(mfrow = c(3,2), mar=c(4,4,2,2))
  xlims=Get_xaxis_scale(Obs_Initlen)
  tempdat = Obs_Finlen-Obs_Initlen
  plot(Obs_Initlen,Obs_Finlen-Obs_Initlen, cex=0.8, cex.axis=1, col="dark grey", xlab = list(" Init. Len. (mm)", cex=1.2),
       ylab = list("Len. inc. (mm)",cex=1.2), bty='n', xlim=c(0,xlims$xmax), ylim=c(0,1.2*max(tempdat)), )
  points(Obs_Initlen,EstLenAtRelAge-Obs_Initlen, pch=16, col="black", cex=0.6)
  
  # initial length vs final length
  xlims=Get_xaxis_scale(Obs_Initlen)
  ylims$ymin=xlims$xmin
  ylims$ymax=xlims$xmax
  ylims$ymin=xlims$xint
  plot(Obs_Initlen,Obs_Finlen, cex=0.8, cex.axis=1, col="dark grey", xlab = list(" Init. Len. (mm)",cex=1.2),
       ylab = list("Final inc. (mm)",cex=1.2), bty='n', xlim=c(0,xlims$xmax), ylim=c(0,ylims$ymax))
  points(Obs_Initlen,EstLenAtRelAge, pch=16, col="black", cex=0.6)
  
  # res vs initial length
  xlims=Get_xaxis_scale(Obs_Initlen)
  tempdat = Obs_Finlen-EstLenAtRelAge
  ylims=Get_yaxis_scale(tempdat)
  plot(Obs_Initlen, Obs_Finlen-EstLenAtRelAge, cex=0.8, cex.axis=1, col="dark grey", xlab = list(" Init. len (mm)",cex=1.2),
       ylab = list("Residual (mm)",cex=1.2), bty='n',xlim=c(0,xlims$xmax), ylim=c(-ylims$ymax,ylims$ymax))
  abline(h=0)
  
  # res vs delta_t
  xlims=Get_xaxis_scale(Obs_delta_t)
  tempdat = Obs_Finlen-EstLenAtRelAge
  ylims=Get_yaxis_scale(tempdat)
  plot(Obs_delta_t, Obs_Finlen-EstLenAtRelAge, cex=0.8, cex.axis=1, col="dark grey", xlab = list(" Delta_t (days)",cex=1.2),
       ylab = list("Residual (mm)",cex=1.2), bty='n',xlim=c(0,xlims$xmax), ylim=c(-ylims$ymax,ylims$ymax))
  abline(h=0)
  
  # estimate of annual growth increment vs specified initial length
  CalculationStage = 2
  LenInc = rep(0,MaxLen)
  for (j in 1:MaxLen)  {
    LenInc[j] = LenAtAge_Rcpp(j, params, GrowthCrvChoice, nstep, CalculationStage, LenPrevIntAge, StartAge=0,
                              Obs_delta_t, Obs_Initlen) - j
  }
  
  xlims=Get_xaxis_scale(MaxLen)
  ylims=Get_yaxis_scale(LenInc)
  plot(1:MaxLen, LenInc, "l", cex=0.8, cex.axis=1, xlab = list(" Init. len. (mm)",cex=1.2),
       ylab = list("Est. ann. inc. (mm)",cex=1.2), bty='n', xlim=c(0,xlims$xmax), ylim=c(0,ylims$ymax))
  
  # estimate of length at integer ages
  CalculationStage = 3
  EstLenAtIntAge <- rep(0, MaxAge)
  for (j in seq(1,MaxAge+1,1)) {
    if (j==1) {
      EstLenAtIntAge[j] = 0 # age zero
    } else {
      LenPrevIntAge = EstLenAtIntAge[j-1]
      EstLenAtIntAge[j] = LenAtAge_Rcpp(j, params, GrowthCrvChoice, nstep, CalculationStage, LenPrevIntAge, StartAge=0,
                                        Obs_delta_t, Obs_Initlen)
    }
  }
  # simulated growth curve
  xlims=Get_xaxis_scale(MaxAge)
  ylims=Get_yaxis_scale(EstLenAtIntAge)
  plot(0:MaxAge,EstLenAtIntAge, cex=0.8, cex.axis=1, pch=16, xlab = list(" Age (yrs)",cex=1.2),
       ylab = list("Length (mm)",cex=1.2), bty='n',xlim=c(0,xlims$xmax))
  lines(0:MaxAge,EstLenAtIntAge, col="black")
  
  # reset default par options
  par(.pardefault)
}



