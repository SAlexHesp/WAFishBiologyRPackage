plot_lnwt = (log_a + b * plot_lnlen)
# get 95% confidence limits
newdat <- data.frame(ln_len=plot_lnlen)
conf_int = predict(mod1, newdata = newdat, interval = 'confidence')
pred_int = predict(mod1, newdata = newdat, interval = 'predict')
results = list(mod1 = mod1,
ParamEst = ParamEst,
adj.r.squared = adj.r.squared,
plot_lnlen = plot_lnlen,
plot_lnwt = plot_lnwt,
conf_int = conf_int,
pred_int = pred_int,
Resid_var=Resid_var)
return(results)
}
# generate synthetic data
set.seed(123)
lenwt_a = 0.00002
lenwt_b = 3
nsamples = 100
minlen = 20
maxlen = 500
sd = 0.1
plotlen = seq(minlen, maxlen, 1)
plotwt = lenwt_a * plotlen ^ lenwt_b
rand_len = round(runif(nsamples, minlen, maxlen),0)
exp_wt = lenwt_a * rand_len ^ lenwt_b
rand_err = rnorm(nsamples, 0, sd)
rand_wt = exp_wt * exp(rand_err) * exp(-0.5 * sd ^ 2)
FishLen=rand_len
FishWt=rand_wt
GetWeightLengthRegressionResults(FishLen=rand_len, FishWt=rand_wt)
xmin=NA
ymin=NA
xmax=NA
ymax=NA
xint=NA
yint=NA
GraphTitle=NA
xaxis_lab=NA
yaxis_lab=NA
PlotCLs=T
# get regression analysis results
res = GetWeightLengthRegressionResults(FishLen, FishWt)
# get default axis limits and intervals
ylims=Get_yaxis_scale(FishWt)
xlims=Get_xaxis_scale(FishLen)
if (is.na(xmin)) {
xmin = xlims$xmin
}
if (is.na(xmax)) {
xmax = xlims$xmax
}
if (is.na(xint)) {
xint = xlims$xint
}
if (is.na(ymin)) {
ymin = ylims$ymin
}
if (is.na(ymax)) {
ymax = ylims$ymax
}
if (is.na(yint)) {
yint = ylims$yint
}
if (is.na(xaxis_lab)) {
xaxis_lab = "Length, mm"
}
if (is.na(yaxis_lab)) {
yaxis_lab = "Weight, g"
}
# plot in normal space
par(mfrow=c(1,1),mar=c(5,4,2,2), oma=c(2,2,2,2), tck=0.02)
plot(FishLen, FishWt, pch=16, cex=0.5, bty='n', ylim=c(0,ymax), xlim=c(0,xmax), xaxt='n', yaxt='n',
ylab="", xlab="", main=GraphTitle, cex.main=0.8)
axis(1,at=seq(0,xmax,xint), cex.axis=0.8, lwd=1.75,lab=F) # y axis
axis(2,at=seq(0,ymax,yint), cex.axis=0.8, lwd=1.75,lab=F) # y axis
axis(1,at=seq(0,xmax,xint), labels=seq(0,xmax,xint),cex.axis=0.8,line=0,las=1,lwd=1.5,tick=F) #add y labels
axis(2,at=seq(0,ymax,yint), cex.axis=0.8,line=0,las = 1,lwd=1.5,tick=F) #add y labels
mtext(expression(paste(plain("Length (mm"),plain(")"))),las=3,side=2,line=3,cex=1,lwd=1.75)
mtext(expression(paste(plain("Weight (g"),plain(")"))),las=1,side=1,line=3,cex=1,lwd=1.75)
# lines(exp(res$plot_lnlen), exp(res$conf_int[,1]), col="black", lty="dotted")
lines(exp(res$plot_lnlen), exp(res$conf_int[,1]) * exp(0.5*res$Resid_var), col="black", lty="solid")
if (PlotCLs == T) {
lines(exp(res$plot_lnlen), exp(res$conf_int[,2]) * exp(0.5*res$Resid_var), col="dark grey", lty="dashed")
lines(exp(res$plot_lnlen), exp(res$conf_int[,3]) * exp(0.5*res$Resid_var), col="dark grey", lty="dashed")
lines(exp(res$plot_lnlen), exp(res$pred_int[,2]) * exp(0.5*res$Resid_var), col="blue", lty="dotted")
lines(exp(res$plot_lnlen), exp(res$pred_int[,3]) * exp(0.5*res$Resid_var), col="blue", lty="dotted")
legend(0.05*xmax, 0.95*ymax, pch=c(1,16), legend=c("Estimate", "low 95% CL", "up 95% CL", "low 95% PL", "up 95% PL"),
lty=c("solid","dashed","dashed","dotted","dotted"),
col=c("black","dark grey","dark grey","blue","blue"),
bty='n', cex=0.6,lwd=1, y.intersp=1.5)
}
# generate synthetic data
set.seed(123)
lenwt_a = 0.00002
lenwt_b = 3
nsamples = 100
minlen = 20
maxlen = 500
sd = 0.1
plotlen = seq(minlen, maxlen, 1)
plotwt = lenwt_a * plotlen ^ lenwt_b
rand_len = round(runif(nsamples, minlen, maxlen),0)
exp_wt = lenwt_a * rand_len ^ lenwt_b
rand_err = rnorm(nsamples, 0, sd)
rand_wt = exp_wt * exp(rand_err) * exp(0.5 * sd ^ 2)
FishLen=rand_len
FishWt=rand_wt
GetWeightLengthRegressionResults(FishLen=rand_len, FishWt=rand_wt)
PlotWeightLengthRel_NormalSpace <- function(FishLen, FishWt, xmin, ymin, xmax, ymax, xint, yint,
GraphTitle, xaxis_lab, yaxis_lab, PlotCLs) {
# get regression analysis results
res = GetWeightLengthRegressionResults(FishLen, FishWt)
# get default axis limits and intervals
ylims=Get_yaxis_scale(FishWt)
xlims=Get_xaxis_scale(FishLen)
if (is.na(xmin)) {
xmin = xlims$xmin
}
if (is.na(xmax)) {
xmax = xlims$xmax
}
if (is.na(xint)) {
xint = xlims$xint
}
if (is.na(ymin)) {
ymin = ylims$ymin
}
if (is.na(ymax)) {
ymax = ylims$ymax
}
if (is.na(yint)) {
yint = ylims$yint
}
if (is.na(xaxis_lab)) {
xaxis_lab = "Length, mm"
}
if (is.na(yaxis_lab)) {
yaxis_lab = "Weight, g"
}
# plot in normal space (with bias correction applied)
par(mfrow=c(1,1),mar=c(5,4,2,2), oma=c(2,2,2,2), tck=0.02)
plot(FishLen, FishWt, pch=16, cex=0.5, bty='n', ylim=c(0,ymax), xlim=c(0,xmax), xaxt='n', yaxt='n',
ylab="", xlab="", main=GraphTitle, cex.main=0.8)
axis(1,at=seq(0,xmax,xint), cex.axis=0.8, lwd=1.75,lab=F) # y axis
axis(2,at=seq(0,ymax,yint), cex.axis=0.8, lwd=1.75,lab=F) # y axis
axis(1,at=seq(0,xmax,xint), labels=seq(0,xmax,xint),cex.axis=0.8,line=0,las=1,lwd=1.5,tick=F) #add y labels
axis(2,at=seq(0,ymax,yint), cex.axis=0.8,line=0,las = 1,lwd=1.5,tick=F) #add y labels
mtext(expression(paste(plain("Length (mm"),plain(")"))),las=3,side=2,line=3,cex=1,lwd=1.75)
mtext(expression(paste(plain("Weight (g"),plain(")"))),las=1,side=1,line=3,cex=1,lwd=1.75)
# lines(exp(res$plot_lnlen), exp(res$conf_int[,1]), col="black", lty="dotted") # without bias correction
lines(exp(res$plot_lnlen), exp(res$conf_int[,1]) * exp(0.5*res$Resid_var), col="black", lty="solid")
if (PlotCLs == T) {
lines(exp(res$plot_lnlen), exp(res$conf_int[,2]) * exp(0.5*res$Resid_var), col="dark grey", lty="dashed")
lines(exp(res$plot_lnlen), exp(res$conf_int[,3]) * exp(0.5*res$Resid_var), col="dark grey", lty="dashed")
lines(exp(res$plot_lnlen), exp(res$pred_int[,2]) * exp(0.5*res$Resid_var), col="blue", lty="dotted")
lines(exp(res$plot_lnlen), exp(res$pred_int[,3]) * exp(0.5*res$Resid_var), col="blue", lty="dotted")
legend(0.05*xmax, 0.95*ymax, pch=c(1,16), legend=c("Estimate", "low 95% CL", "up 95% CL", "low 95% PL", "up 95% PL"),
lty=c("solid","dashed","dashed","dotted","dotted"),
col=c("black","dark grey","dark grey","blue","blue"),
bty='n', cex=0.6,lwd=1, y.intersp=1.5)
}
}
xmin=NA
ymin=NA
xmax=NA
ymax=NA
xint=NA
yint=NA
GraphTitle=NA
xaxis_lab=NA
yaxis_lab=NA
PlotCLs=T
PlotWeightLengthRel_NormalSpace(FishLen=rand_len, FishWt=rand_wt, xmin=NA, ymin=NA, xmax=NA, ymax=NA, xint=NA, yint=NA,
GraphTitle=NA, xaxis_lab=NA, yaxis_lab=NA, PlotCLs=T)
# library(WAFishBiology)
# install.packages("C:/~/L3Assess_0.1.0.tar.gz", source = TRUE, repos=NULL)
library(L3Assess)
pi
Stdev
library(L3Assess)
library(L3Assess)
set.seed(123)
# Simulate data
SampleSize=5000
set.seed(123)
MaxAge = 26
NatMort = 4.22/MaxAge
FishMort = 0.2
MaxLen = 1100
LenInc = 50
SelectivityType=2 # 1=selectivity inputted as vector, 2=asymptotic logistic selectivity curve
L50 = 400 # selectivity
L95 = 450 # selectivity
SelectivityVec = NA
# # single sex, von Bertalanffy
# GrowthCurveType = 1 # 1 = von Bertalanffy, 2 = Schnute (no yet implemented for this method)
# Linf = 800
# vbK = 0.2
# CVSizeAtAge = 0.08
# GrowthParams = c(Linf, vbK, CVSizeAtAge)
# RefnceAges = NA
# 2 sexes, von Bertalanffy
GrowthCurveType = 1 # 1 = von Bertalanffy, 2 = Schnute (no yet implemented for this method)
Linf = c(700,850)
vbK = c(0.25,0.2)
CVSizeAtAge = c(0.05,0.05)
RefnceAges = NA
GrowthParams = data.frame(Linf=Linf, vbK=vbK, CVSizeAtAge=CVSizeAtAge)
Res=SimLenAndAgeFreqData(SampleSize, MaxAge, NatMort, FishMort, MaxLen, LenInc, SelectivityType,
L50, L95, SelectivityVec, GrowthCurveType, GrowthParams, RefnceAges, CVSizeAtAge)
lbnd=Res$lbnd
midpt=Res$midpt
ubnd=Res$ubnd
# # get data - 1 sex (or combined sexes)
# ObsCatchFreqAtLen = Res$ObsCatchFreqAtLen # 1 sex
# ObsCatchFreqAtLengthAndAge = as.matrix(Res$ObsCatchFreqAtLengthAndAge) # 1 sex
# get data - 2 sexes
ObsCatchFreqAtLen <- data.frame(matrix(nrow = 2, ncol = length(midpt))) # 2 sex
colnames(ObsCatchFreqAtLen) <- midpt
ObsCatchFreqAtLen[1,] = Res$ObsCatchFreqAtLen_Fem
ObsCatchFreqAtLen[2,] = Res$ObsCatchFreqAtLen_Mal
ObsCatchFreqAtLengthAndAge = array(c(unlist(Res$ObsCatchFreqAtLengthAndAge_Fem), unlist(Res$ObsCatchFreqAtLengthAndAge_Mal)),
c(MaxAge, length(midpt), 2), dimnames=list(rownames(Res$ObsCatchFreqAtLengthAndAge_Fem),
colnames(Res$ObsCatchFreqAtLengthAndAge_Fem)))
# # get params - 1 sex
# InitFishMort = 0.3 # specify starting parameters
# InitL50 = 300
# InitL95 = 500
# InitLinf = 800
# InitvbK = 0.2
# InitCVSizeAtAge = 0.05
# get params - 2 sexes
InitFishMort = 0.3 # specify starting parameters
InitL50 = 300
InitL95 = 500
InitLinf = c(800,800)
InitvbK = c(0.25,0.25)
InitCVSizeAtAge = 0.05
InitFishMort_logit = log(InitFishMort/(1-InitFishMort)) # logit transform (so F is always between 0 and 1)
params = c(InitFishMort_logit, log(c(InitL50, InitL95, InitLinf, InitvbK, InitCVSizeAtAge)))
FittedRes=GetAgeAndLengthBasedCatchCurveResults(params, SelectivityType, ObsCatchFreqAtLen, ObsCatchFreqAtLengthAndAge,
lbnd, ubnd, midpt, SelectivityVec, MaxAge, NatMort)
library(L3Assess)
set.seed(123)
MinAge = 1
MaxAge = 40
Ages = MinAge:MaxAge
NatMort <- exp(1.46 - (1.01 * (log(MaxAge)))) # i.e. Hoenig's (1983) eqn for fish
FMort = 0.1
ZMort = FMort + NatMort
SelA50 = 6
SelA95 = 8
SampleSize = 500 # required number of fish for age sample
SelAtAge = 1 / (1 + exp(-log(19) * (Ages - SelA50) / (SelA95 - SelA50)))
FAtAge = SelAtAge * FMort
ZAtAge = NatMort + FAtAge
N = numeric(MaxAge)
N[1] = 1
for (i in 2:MaxAge) {
if (i < MaxAge) {
N[i] = N[i-1] * exp(-ZAtAge[i-1])
} else {
N[i] = N[i-1] * exp(-ZAtAge[i-1] / (1 - exp(-ZAtAge[i])))
}
}
CatchAtAge = N * (FAtAge / ZAtAge) * (1 - exp(-ZAtAge)) # catch at age
PropAtAge = CatchAtAge / sum(CatchAtAge)
CatchSample = rmultinom(n=1, size=SampleSize, prob=PropAtAge)
ObsAgeFreq = CatchSample[,1]
GetChapmanRobsonMortalityResults(RecAssump=0, MinAge, MaxAge, ObsAgeFreq)
set.seed(123)
MinAge = 0
MaxAge = 40
Ages = MinAge:MaxAge
NatMort <- exp(1.46 - (1.01 * (log(MaxAge)))) # i.e. Hoenig's (1983) eqn for fish
FMort = 0.1
ZMort = FMort + NatMort
SelA50 = 6
SelA95 = 8
SampleSize = 500 # required number of fish for age sample
Ages = MinAge:MaxAge
Ages = MinAge:MaxAge
SelAtAge = 1 / (1 + exp(-log(19) * (Ages - SelA50) / (SelA95 - SelA50)))
FAtAge = SelAtAge * FMort
ZAtAge = NatMort + FAtAge
N = numeric(MaxAge)
N = numeric(length(Ages))
N[1] = 1
N[1] = 1
for (i in seq(MinAge+1,MaxAge,1)) {
if (i < MaxAge) {
N[i] = N[i-1] * exp(-ZAtAge[i-1])
} else {
N[i] = N[i-1] * exp(-ZAtAge[i-1] / (1 - exp(-ZAtAge[i])))
}
}
N = numeric(length(Ages))
k=1
N[k] = 1
for (i in seq(MinAge+1,MaxAge,1)) {
k=k+1
if (i < MaxAge) {
N[k] = N[k-1] * exp(-ZAtAge[k-1])
} else {
N[k] = N[k-1] * exp(-ZAtAge[k-1] / (1 - exp(-ZAtAge[k])))
}
}
CatchAtAge = N * (FAtAge / ZAtAge) * (1 - exp(-ZAtAge)) # catch at age
CatchAtAge
PropAtAge = CatchAtAge / sum(CatchAtAge)
CatchSample = rmultinom(n=1, size=SampleSize, prob=PropAtAge)
CatchSample
rm(list=ls())
library(L3Assess)
SimAgeFreqData <- function(SampleSize, MinAge, MaxAge, SelA50, SelA95, NatMort, FMort) {
Ages = MinAge:MaxAge
SelAtAge = 1 / (1 + exp(-log(19) * (Ages - SelA50) / (SelA95 - SelA50)))
FAtAge = SelAtAge * FMort
ZAtAge = NatMort + FAtAge
N = numeric(length(Ages))
k=1
N[k] = 1
for (i in seq(MinAge+1,MaxAge,1)) {
k=k+1
if (i < MaxAge) {
N[k] = N[k-1] * exp(-ZAtAge[k-1])
} else {
N[k] = N[k-1] * exp(-ZAtAge[k-1] / (1 - exp(-ZAtAge[k])))
}
}
CatchAtAge = N * (FAtAge / ZAtAge) * (1 - exp(-ZAtAge)) # catch at age
PropAtAge = CatchAtAge / sum(CatchAtAge)
CatchSample = rmultinom(n=1, size=SampleSize, prob=PropAtAge)
results = list(Ages=Ages,
SelAtAge=SelAtAge,
PropAtAge=PropAtAge,
CatchSample=CatchSample)
}
set.seed(123)
MinAge = 0
MaxAge = 40
Ages = MinAge:MaxAge
NatMort <- exp(1.46 - (1.01 * (log(MaxAge)))) # i.e. Hoenig's (1983) eqn for fish
FMort = 0.1
ZMort = FMort + NatMort
SelA50 = 6
SelA95 = 8
SampleSize = 500 # required number of fish for age sample
SimAgeFreqData(SampleSize, MinAge, MaxAge, SelA50, SelA95, NatMort, FMort)
ObsAgeFreq = CatchSample[,1]
Res=SimAgeFreqData(SampleSize, MinAge, MaxAge, SelA50, SelA95, NatMort, FMort)
ObsAgeFreq = Res$CatchSample[,1]
ObsAgeFreq
Res$Ages
GetChapmanRobsonMortalityResults(RecAssump=0, MinAge, MaxAge, ObsAgeFreq)
res=GetChapmanRobsonMortalityResults(RecAssump=0, MinAge, MaxAge, ObsAgeFreq)
res$ZMort
ZMort
set.seed(123)
MinAge = 1
MaxAge = 40
Ages = MinAge:MaxAge
NatMort <- exp(1.46 - (1.01 * (log(MaxAge)))) # i.e. Hoenig's (1983) eqn for fish
FMort = 0.1
ZMort = FMort + NatMort
SelA50 = 6
SelA95 = 8
SampleSize = 500 # required number of fish for age sample
Res=SimAgeFreqData(SampleSize, MinAge, MaxAge, SelA50, SelA95, NatMort, FMort)
ObsAgeFreq = Res$CatchSample[,1]
Res$Ages
res=GetChapmanRobsonMortalityResults(RecAssump=0, MinAge, MaxAge, ObsAgeFreq)
res$ZMort
ZMort
res$ZMort
GetLinearCatchCurveResults(RecAssump=0, MinFreq=1, Ages, ObsAgeFreq)
res=GetLinearCatchCurveResults(RecAssump=0, MinFreq=1, Ages, ObsAgeFreq)
res$ZMort
ZMort # true value
Res$Ages
res=GetChapmanRobsonMortalityResults(RecAssump=0, MinAge, MaxAge, ObsAgeFreq)
res$ZMort
res=GetLinearCatchCurveResults(RecAssump=0, MinFreq=1, Ages, ObsAgeFreq)
res$ZMort
Init_FMort = 0.2
Init_SelA50 = 5
Init_SelA95 = 7
ln_params = log(c(FMort, SelA50, SelA95))
GetLogisticCatchCurveResults(ln_params, NatMort, Ages, ObsAgeFreq)
res=GetLogisticCatchCurveResults(ln_params, NatMort, Ages, ObsAgeFreq)
res$ParamEst
SampleSize = 1000 # required number of fish for age sample
Res=SimAgeFreqData(SampleSize, MinAge, MaxAge, SelA50, SelA95, NatMort, FMort)
ObsAgeFreq = Res$CatchSample[,1]
ZMort # true value
Res$Ages
res=GetChapmanRobsonMortalityResults(RecAssump=0, MinAge, MaxAge, ObsAgeFreq)
res$ZMort
res=GetLinearCatchCurveResults(RecAssump=0, MinFreq=1, Ages, ObsAgeFreq)
res$ZMort
Init_FMort = 0.2
Init_SelA50 = 5
Init_SelA95 = 7
ln_params = log(c(FMort, SelA50, SelA95))
res=GetLogisticCatchCurveResults(ln_params, NatMort, Ages, ObsAgeFreq)
res$ParamEst
rm(list=ls())
library(L3Assess)
set.seed(123)
MinAge = 1
MaxAge = 40
Ages = MinAge:MaxAge
NatMort <- exp(1.46 - (1.01 * (log(MaxAge)))) # i.e. Hoenig's (1983) eqn for fish
FMort = 0.1
ZMort = FMort + NatMort
SelA50 = 6
SelA95 = 8
SampleSize = 500 # required number of fish for age sample
SelAtAge = 1 / (1 + exp(-log(19) * (Ages - SelA50) / (SelA95 - SelA50)))
FAtAge = SelAtAge * FMort
ZAtAge = NatMort + FAtAge
N = numeric(MaxAge)
N[1] = 1
for (i in 2:MaxAge) {
if (i < MaxAge) {
N[i] = N[i-1] * exp(-ZAtAge[i-1])
} else {
N[i] = N[i-1] * exp(-ZAtAge[i-1] / (1 - exp(-ZAtAge[i])))
}
}
CatchAtAge = N * (FAtAge / ZAtAge) * (1 - exp(-ZAtAge)) # catch at age
PropAtAge = CatchAtAge / sum(CatchAtAge)
CatchSample = rmultinom(n=1, size=SampleSize, prob=PropAtAge)
ObsAgeFreq = CatchSample[,1]
GetChapmanRobsonMortalityResults(RecAssump=0, MinAge, MaxAge, ObsAgeFreq)
res=GetChapmanRobsonMortalityResults(RecAssump=0, MinAge, MaxAge, ObsAgeFreq)
res$ZMort
library(WAFishBiology)
Res$CatchSample
rm(list=ls())
library(L3Assess)
set.seed(123)
MinAge = 1
MaxAge = 40
Ages = MinAge:MaxAge
NatMort <- exp(1.46 - (1.01 * (log(MaxAge)))) # i.e. Hoenig's (1983) eqn for fish
FMort = 0.1
ZMort = FMort + NatMort
SelA50 = 6
SelA95 = 8
SampleSize = 500 # required number of fish for age sample
SelAtAge = 1 / (1 + exp(-log(19) * (Ages - SelA50) / (SelA95 - SelA50)))
FAtAge = SelAtAge * FMort
ZAtAge = NatMort + FAtAge
N = numeric(MaxAge)
N[1] = 1
for (i in 2:MaxAge) {
if (i < MaxAge) {
N[i] = N[i-1] * exp(-ZAtAge[i-1])
} else {
N[i] = N[i-1] * exp(-ZAtAge[i-1] / (1 - exp(-ZAtAge[i])))
}
}
CatchAtAge = N * (FAtAge / ZAtAge) * (1 - exp(-ZAtAge)) # catch at age
PropAtAge = CatchAtAge / sum(CatchAtAge)
CatchSample = rmultinom(n=1, size=SampleSize, prob=PropAtAge)
ObsAgeFreq = CatchSample[,1]
res=GetChapmanRobsonMortalityResults(RecAssump=0, MinAge, MaxAge, ObsAgeFreq)
res$ZMort
SimAgeFreqData <- function(SampleSize, MinAge, MaxAge, SelA50, SelA95, NatMort, FMort) {
Ages = MinAge:MaxAge
SelAtAge = 1 / (1 + exp(-log(19) * (Ages - SelA50) / (SelA95 - SelA50)))
FAtAge = SelAtAge * FMort
ZAtAge = NatMort + FAtAge
N = numeric(length(Ages))
k=1
N[k] = 1
for (i in seq(MinAge+1,MaxAge,1)) {
k=k+1
if (i < MaxAge) {
N[k] = N[k-1] * exp(-ZAtAge[k-1])
} else {
N[k] = N[k-1] * exp(-ZAtAge[k-1] / (1 - exp(-ZAtAge[k])))
}
}
CatchAtAge = N * (FAtAge / ZAtAge) * (1 - exp(-ZAtAge)) # catch at age
PropAtAge = CatchAtAge / sum(CatchAtAge)
CatchSample = rmultinom(n=1, size=SampleSize, prob=PropAtAge)
results = list(Ages=Ages,
SelAtAge=SelAtAge,
PropAtAge=PropAtAge,
CatchSample=CatchSample)
}
set.seed(123)
MinAge = 1
MaxAge = 40
Ages = MinAge:MaxAge
NatMort <- exp(1.46 - (1.01 * (log(MaxAge)))) # i.e. Hoenig's (1983) eqn for fish
FMort = 0.1
ZMort = FMort + NatMort
SelA50 = 6
SelA95 = 8
SampleSize = 1000 # required number of fish for age sample
Res=SimAgeFreqData(SampleSize, MinAge, MaxAge, SelA50, SelA95, NatMort, FMort)
ObsAgeFreq = Res$CatchSample[,1]
Res$CatchSample
ObsAgeFreq = unlist(Res$CatchSample)
ObsAgeFreq
ObsAgeFreq = unlist(as.vector(Res$CatchSample))
ObsAgeFreq
